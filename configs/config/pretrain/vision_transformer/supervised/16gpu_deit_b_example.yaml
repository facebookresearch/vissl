# @package _global_
config:
  HOOKS:
    TENSORBOARD_SETUP:
      USE_TENSORBOARD: True
      EXPERIMENT_LOG_DIR:
      FLUSH_EVERY_N_MIN: 20
  CHECKPOINT:
    DIR: "."
    AUTO_RESUME: True
    CHECKPOINT_FREQUENCY: 1
  DATA:
    NUM_DATALOADER_WORKERS: 8
    TRAIN:
      DATA_SOURCES: [disk_folder]
      LABEL_SOURCES: [disk_folder]
      DATASET_NAMES: [imagenet1k_folder]
      BATCHSIZE_PER_REPLICA: 32
      DROP_LAST: True
      TRANSFORMS:
        - name: RandomResizedCrop
          size: 224
        - name: RandomHorizontalFlip
        - name: RandAugment
          magnitude: 9
          magnitude_std: 0.5
          increasing_severity: True
        - name: ColorJitter
          brightness: 0.4
          contrast: 0.4
          saturation: 0.4
          hue: 0.4
        - name: ToTensor
        - name: RandomErasing
          p: 0.25
        - name: Normalize
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
      COLLATE_FUNCTION: cutmixup_collator
      COLLATE_FUNCTION_PARAMS: {
        "mixup_alpha": 0.8, # mixup alpha value, mixup is active if > 0.
        "cutmix_alpha": 1.0, # cutmix alpha value, cutmix is active if > 0.
        "prob": 1.0, # probability of applying mixup or cutmix per batch or element
        "switch_prob": 0.5, # probability of switching to cutmix instead of mixup when both are active
        "mode": "batch", # how to apply mixup/cutmix params (per 'batch', 'pair' (pair of elements), 'elem' (element)
        "correct_lam": True, # apply lambda correction when cutmix bbox clipped by image borders
        "label_smoothing": 0.1, # apply label smoothing to the mixed target tensor
        "num_classes": 1000 # number of classes for target
      }

    TEST:
      DATA_SOURCES: [disk_folder]
      LABEL_SOURCES: [disk_folder]
      DATASET_NAMES: [imagenet1k_folder]
      BATCHSIZE_PER_REPLICA: 64
      TRANSFORMS:
        - name: Resize
          size: 256
        - name: CenterCrop
          size: 224
        - name: ToTensor
        - name: Normalize
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
  MODEL:
    TRUNK:
      NAME: vision_transformer
      VISION_TRANSFORMERS:
        IMAGE_SIZE: 224
        PATCH_SIZE: 16
        NUM_LAYERS: 12
        NUM_HEADS: 12
        HIDDEN_DIM: 768
        MLP_DIM: 3072
        CLASSIFIER: token
        DROPOUT_RATE: 0
        ATTENTION_DROPOUT_RATE: 0
        DROP_PATH_RATE: 0.1 # stochastic depth dropout probability
    HEAD:
      PARAMS: [
        ["mlp", {"dims": [768, 1000]}],
      ]
  LOSS:
    name: cross_entropy_multiple_output_single_target
    cross_entropy_multiple_output_single_target:
      ignore_index: -1
  OPTIMIZER:
    name: adamw
    weight_decay: 0.05
    num_epochs: 100
    # We don't want to regularize the position embedding or classification token
    non_regularized_parameters: [pos_embedding, class_token]
    param_schedulers:
      lr:
        auto_lr_scaling:
          auto_scale: True
          base_value: 0.0005
          base_lr_batch_size: 512
        name: composite
        schedulers:
          - name: linear
            start_value: 0.00001
            end_value: 0.0005
          - name: cosine
            start_value: 0.0005
            end_value: 0.000001
        interval_scaling: [rescaled, fixed]
        update_interval: step
        lengths: [0.05, 0.95]
  METERS:
    name: accuracy_list_meter
    accuracy_list_meter:
      num_meters: 1
      topk_values: [1, 5]
  TRAINER:
    TRAIN_STEP_NAME: standard_train_step
  DISTRIBUTED:
    BACKEND: nccl
    NUM_NODES: 2
    NUM_PROC_PER_NODE: 8 # 1 GPU
    RUN_ID: "60521"
  MACHINE:
    DEVICE: gpu
  VERBOSE: True
  LOG_FREQUENCY: 100
  TEST_ONLY: False
  TEST_EVERY_NUM_EPOCH: 1
  TEST_MODEL: True
  SEED_VALUE: 0
  MULTI_PROCESSING_METHOD: fork
