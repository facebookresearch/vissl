# Copyright (c) Facebook, Inc. and its affiliates.

# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

# -------------------------------------------------------------------------------------
# Environments to run the jobs in
# -------------------------------------------------------------------------------------
cpu: &cpu
  environment:
    TERM: xterm
    TORCH_CUDA_ARCH_LIST: "5.0;5.2;5.3"
  machine:
    image: ubuntu-1604:201903-01
  resource_class: medium

gpu: &gpu
  environment:
    CUDA_VER: "10.2"
    TORCH_CUDA_ARCH_LIST: "5.0;5.2;5.3"
    TERM: xterm
  machine:
    image: ubuntu-1604:201903-01
  resource_class: gpu.medium  # Tesla M60

# -------------------------------------------------------------------------------------
# Re-usable commands
# -------------------------------------------------------------------------------------
install_python: &install_python
  - run:
      name: Install Python
      working_directory: ~/
      command: |
        pyenv versions
        pyenv install -f 3.7.0
        pyenv global 3.7.0

update_gcc7: &update_gcc7
  - run:
      name: Update GCC7
      working_directory: ~/
      command: |
        sudo apt-get update
        sudo add-apt-repository ppa:jonathonf/gcc
        sudo apt-get update
        sudo apt-get install gcc-7 g++-7
        sudo update-alternatives  --install /usr/bin/gcc gcc /usr/bin/gcc-7 60  --slave /usr/bin/g++ g++ /usr/bin/g++-7  --slave /usr/bin/gcov gcov /usr/bin/gcov-7  --slave /usr/bin/gcov-tool gcov-tool /usr/bin/gcov-tool-7  --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-7  --slave /usr/bin/gcc-nm gcc-nm /usr/bin/gcc-nm-7  --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-7
        gcc --version
        g++ --version

install_fairscale: &install_fairscale
  - run:
      name: Install Fairscale
      working_directory: ~/
      command: |
        pip uninstall -y fairscale
        pip install fairscale@https://github.com/facebookresearch/fairscale/tarball/df7db85cef7f9c30a5b821007754b96eb1f977b6


install_classy_vision: &install_classy_vision
  - run:
      name: Install ClassyVision
      working_directory: ~/
      command: |
        pip uninstall -y classy_vision
        pip install classy-vision@https://github.com/facebookresearch/ClassyVision/tarball/main

setupcuda: &setupcuda
  run:
    name: Setup CUDA and NVIDIA driver
    working_directory: ~/
    command: |
      # download and install nvidia drivers, cuda, etc
      wget --no-verbose --no-clobber -P ~/nvidia-downloads 'https://s3.amazonaws.com/ossci-linux/nvidia_driver/NVIDIA-Linux-x86_64-430.40.run'
      wget --no-verbose --no-clobber -P ~/nvidia-downloads http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run
      sudo /bin/bash ~/nvidia-downloads/NVIDIA-Linux-x86_64-430.40.run --no-drm -q --ui=none
      sudo sh ~/nvidia-downloads/cuda_10.2.89_440.33.01_linux.run --silent
      echo "Done installing CUDA."
      nvidia-smi

setup_venv: &setup_venv
  - run:
      name: Setup Virtual Environment
      command: |
        python -m venv ~/vissl_venv
        echo ". ~/vissl_venv/bin/activate" >> $BASH_ENV
        . ~/vissl_venv/bin/activate
        python --version
        which python
        which pip
        pip --version
        pip install --upgrade pip
        which python
        which pip
        pip --version
        pip install -U setuptools

pip_list: &pip_list
  - run:
      name: Pip list
      command: |
        pip list

install_vissl_dep: &install_vissl_dep
  - run:
      name: Install Dependencies
      working_directory: ~/vissl
      command: |
        pip install --progress-bar off torch==1.7.1 torchvision==0.8.2 opencv-python==3.4.2.17
        pip install --progress-bar off -r requirements.txt
        # Update this since classy_vision seems to need it.
        pip install --progress-bar off --upgrade iopath

# Must install python3-magic as per documentation:
# https://github.com/facebookresearch/AugLy#installation
install_augly: &install_augly
  - run:
      name: Install augly
      working_directory: ~/vissl
      command: |
        pip install augly
        sudo apt-get update
        sudo apt-get install python3-magic

install_apex_gpu: &install_apex_gpu
  - run:
      name: Install Apex
      working_directory: ~/vissl
      environment:
        CUDA_VER: "10.2"
        TORCH_CUDA_ARCH_LIST: "5.0;5.2;5.3"
      command: |
        bash ./docker/common/install_apex.sh

install_apex_cpu: &install_apex_cpu
  - run:
      name: Install Apex for CPU
      working_directory: ~/vissl
      command: |
        pip install -v --disable-pip-version-check --no-cache-dir apex@https://github.com/NVIDIA/apex/tarball/9ce0a10fb6c2537ef6a59f27b7875e32a9e9b8b8

install_vissl: &install_vissl
  - run:
      name: Install VISSL
      command: |
        pip install -U --progress-bar off -e .[dev]

run_unittests: &run_unittests
  - run:
      name: Run CPU Unit Tests
      command: |
        python -m unittest discover -v -s tests

# -------------------------------------------------------------------------------------
# Jobs to run (cpu and gpu)
# -------------------------------------------------------------------------------------
jobs:
  cpu_tests:
    <<: *cpu

    working_directory: ~/vissl

    steps:
      - checkout
      - <<: *install_python
      - <<: *setup_venv

      # Cache the vissl_venv directory that contains dependencies
      - restore_cache:
          keys:
            - v6-cpu-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "setup.py" }}

      - <<: *install_vissl_dep
      - <<: *install_augly
      - <<: *install_classy_vision
      - <<: *install_fairscale
      - <<: *install_apex_cpu
      - <<: *pip_list

      - save_cache:
          paths:
            - ~/vissl_venv
          key: v6-cpu-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "setup.py" }}

      - <<: *install_vissl

      - run:
          name: isort
          command: |
            isort --sp . .
      - run:
          name: black
          command: |
            black .
      - run:
          name: flake8
          command: |
            flake8 --max-line-length 88 --ignore E501,E203,E266,W503,E741 .

      - <<: *run_unittests

  gpu_tests:
    <<: *gpu

    working_directory: ~/vissl

    steps:
      - checkout
      - <<: *setupcuda
      - <<: *install_python
      - <<: *setup_venv

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v6-gpu-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "setup.py" }}-{{ checksum "docker/common/install_apex.sh" }}

      - <<: *install_vissl_dep
      - <<: *install_classy_vision
      - <<: *install_fairscale
      - <<: *update_gcc7
      - <<: *install_apex_gpu
      - <<: *pip_list

      - run:
          name: Check CUDA Available
          command: python -c "import torch; assert torch.cuda.is_available(), 'CUDA not available'"

      - save_cache:
          paths:
            - ~/vissl_venv
          key: v6-gpu-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "setup.py" }}-{{ checksum "docker/common/install_apex.sh" }}

      - <<: *install_vissl

      - run:
          name: Run GPU tests
          command: bash ./dev/run_quick_tests.sh

# -------------------------------------------------------------------------------------
# Workflows
# -------------------------------------------------------------------------------------
workflows:
  version: 2
  build_and_test:
    jobs:
      - cpu_tests
      - gpu_tests
